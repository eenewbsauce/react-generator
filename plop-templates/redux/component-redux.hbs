import _ from 'lodash';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import React, { useEffect } from 'react';
import { connect } from 'react-redux';

{{#if addStyleSheet}}
import './{{kebabCase name}}.scss'
{{/if}}

import { {{camelCase baseActionName}} } from './actions/{{camelCase name}}';
import { ReduxContainer } from '../reduxContainer';

const {{pascalCase name}} = ({canFetch, canShowResults, className, error, {{camelCase baseActionName}}, loading}) => {
    useEffect(() => {
        if (canFetch) {
            {{camelCase baseActionName}}();
        }
    }, []);

{{#if addStyleSheet}}
    const classes = classNames('{{kebabCase name}}', 'bg-white', 'space-sm', className);
{{else}}
    const classes = classNames('bg-white', 'space-sm', className);
{{/if}}

    return (
        <section className={classes}>
            <div className="container">
                <div className="row">
                    <div className="col-lg-6 pl-3">
                        <ReduxContainer
                            canRender={canShowResults}
                            error={error}
                            loading={loading}
                            render={() =>
                                <p>Hello World</p>
                            }
                        />
                    </div>
                </div>
            </div>
        </section>
    )
}

const mapStateToProps = ({ {{camelCase storeProperty}} }) => {
  const props = {
    {{camelCase storeProperty}}: {{camelCase storeProperty}}.data, 
    error: {{camelCase storeProperty}}.error,
    loading: {{camelCase storeProperty}}.loading,
    ready: {{camelCase storeProperty}}.ready,
  };

  props.canFetch = !props.ready && !props.loading;
  props.canShowResults = Boolean(props.ready && props.{{camelCase storeProperty}}) || !_.isEmpty(props.{{camelCase storeProperty}});

  return props;
};

const mapDispatchToProps = dispatch => ({
  {{camelCase baseActionName}}: () => dispatch({{camelCase baseActionName}}()),
});

{{pascalCase name}}.defaultProps = {
    className: '',
};

{{pascalCase name}}.propTypes = {
    className: PropTypes.string,
}

export default connect(mapStateToProps, mapDispatchToProps)({{pascalCase name}})
